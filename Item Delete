/**
 * Module Description
 * Version            - 1.0
 * Script Type        - ScheduleScript
 * Description        - Delete ENTITY records 
 * Author             - Mibar
 */


var MINIMUM_USAGE = 1000;

function recordsToremove(type)
{
	var context = nlapiGetContext();
	var searchResults=new Array();
    var entityName =  'customrecord_mb_item_inventory'; // //'customrecord_mb_item_attribute'; // 'customrecord_mb_item_attribute'; // 'customrecord_mb_invoice_fees'; //kititem';// //'inventoryitem';
  
  //var searchResults = nlapiSearchRecord(entityName, 'customsearch_mb_item_delete');
	//var searchObj=nlapiLoadSearch(entityName, 'customsearch_mb_fees_linked_to_invoice_2');
    //var searchObj=nlapiLoadSearch(entityName, 'customsearch_mb_delete_item_attributes'); 
  //var searchObj=nlapiLoadSearch(entityName, 'customsearch_mb_item_inv_ss_fba');
  //customsearch_mb_invfees_duplicated customsearch_mb_item_attr_wo_itemlink
  
    entityName = 'customrecord_mb_store_detail'; // 'customrecord_mb_store_fees'; 
  //var searchObj=nlapiLoadSearch(entityName, 'customsearch_mb_store_deposit_fees_view');
  var searchObj=nlapiLoadSearch(entityName, 'customsearch_mb_store_deposit_fee_view');
  
	//var searchObj = //nlapiLoadSearch('customrecord_mb_kit_components','customsearch_mb_kits_list_with_comp_pe_2');
  
  
	var resultset= searchObj.runSearch();

	if (resultset!= null)
	{
	var searchid=0;
	 do
	 {
		 try
		 {
			var resultslice= resultset.getResults(searchid, searchid + 1000);
			if(resultslice != null && resultslice!= '')
			{
				for(var rs in resultslice)
				{
					searchResults.push(resultslice[rs]);
					searchid++;
                    //if (searchid == 3)
                    //  {
                    //  nlapiLogExecution('debug', 'I am out from searchID', searchid);
                    //  break;
                    //  }
				}
			} 
		 }
		 catch(e) {
				nlapiLogExecution('debug', 'Error has occured', e);
		 }
	  }
	 while(resultslice.length >= 1000);
	}
  nlapiLogExecution('debug', 'searchID is now', searchid);

	for (var i = 0; i < searchResults.length; i++)
	{
		if (nlapiGetContext().getRemainingUsage() <= MINIMUM_USAGE)
		{
			nlapiLogExecution('AUDIT', 'Scheduled Script', 'Not enough usage left('
					+ nlapiGetContext().getRemainingUsage()
					+ ') . Exiting and rescheduling script.');
			setRecoveryPoint();
			checkGovernance();
		}
		try
		{
				nlapiDeleteRecord(searchResults[i].getRecordType(), searchResults[i].getId());
			//nlapiLogExecution('debug', 'searchResults ', searchResults[i].getRecordType() + '--'+ searchResults[i].getId() );
			  //nlapiSubmitField(searchResults[i].getRecordType(), searchResults[i].getId(), 'postingperiod', '188');
			
		}
		catch(e)
		{
			nlapiLogExecution('debug', 'Error has occured', e);
		}

		//nlapiLogExecution('debug', searchResults[i].getRecordType(), searchResults[i].getId());
	}
}


function setRecoveryPoint() {
    var state = nlapiSetRecoveryPoint();
    if (state.status == 'SUCCESS')
        return; 
	
    if (state.status == 'RESUME') 
    {
        nlapiLogExecution("ERROR", "Resuming script because of " + state.reason
				+ ".  Size = " + state.size);
        return;
    } else if (state.status == 'FAILURE') 
    {
        nlapiLogExecution("ERROR", "Failed to create recovery point. Reason = "
				+ state.reason + " / Size = " + state.size);
    }
}

function checkGovernance() {
    var context = nlapiGetContext();
    if (context.getRemainingUsage() < MINIMUM_USAGE) {
        var state = nlapiYieldScript();
        if (state.status == 'FAILURE') {
            nlapiLogExecution("ERROR",
					"Failed to yield script, exiting: Reason = " + state.reason
					+ " / Size = " + state.size);
            throw "Failed to yield script";
        }
    }
}


function donotUsescheduled(type) 
{
                var context = nlapiGetContext();             
                var entityName = 'inventoryitem';                                                                            
                var searchResults = nlapiSearchRecord(entityName, 'customsearch_mb_item_delete');
               
                for (var i = 0; searchResults != null && i < searchResults.length; i++)
                                {                                             
/*
                                                if (i < 5)
                                                {
                                                                nlapiLogExecution("DEBUG", entityName +" Delete", searchResults[i].getId());
                                                }
*/                                          
                                                try
                                                {
                                                                nlapiDeleteRecord(searchResults[i].getRecordType(), searchResults[i].getId());
                                                               
                                                }
                                                catch (err)
                                                {
                                                                nlapiLogExecution("DEBUG", entityName +" Fail to delete item ", searchResults[i].getValue('itemid'));
                                                }
 
            if ( context.getRemainingUsage() <= 0 && (i+1) < searchResults.length )
                                    {
                        var status = nlapiScheduleScript(context.getScriptId(), context.getDeploymentId())
                                        if ( status == 'QUEUED' )
                                            break;    
                                    }
 
                                }             
}