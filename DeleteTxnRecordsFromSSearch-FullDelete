/**
 * Module Description
 * Version            - 1.0
 * Script Type        - ScheduleScript
 * Description        - Delete records 
 * Author             - Mibar
 */

var MINIMUM_USAGE = 1000;

function recordsToremove(type) 
{
	var context = nlapiGetContext();
	var searchResults=new Array();
	//var searchObj=nlapiLoadSearch(null,'customsearch_mb_txn_created_today_debug'); // 'customsearch_mb_itm_receipt_linked_to_ds');  //customsearch_mb_invadj_delete 
  
	//var searchObj=nlapiLoadSearch(null, 'customsearch_mb_invoices_duplicates'); 
      var searchObj=nlapiLoadSearch(null, 'customsearch_mb_deleterecords_from_ss'); //customsearch_mb_invoices_duplicates
  
    //var searchObj=nlapiLoadSearch(null, 'customsearch_mb_inv_dupl_record'); 
    //var searchObj=nlapiLoadSearch(null, 'customsearch_mb_itemreceipts_linked_drop');
	//var searchObj=nlapiLoadSearch(null, 'customsearch_mb_inv_total_differences');

	var resultset= searchObj.runSearch();

	if (resultset!= null)
	{
	var searchid=0;
	 do
	 {
		 try
		 {
			var resultslice= resultset.getResults(searchid, searchid + 1000);
			if(resultslice != null && resultslice!= '')
			{
				for(var rs in resultslice)
				{
					searchResults.push(resultslice[rs]);
					searchid++;
				}
			} 
		 }
		 catch(e) {
				nlapiLogExecution('debug', 'Error has occured', e);
		 }
	  }
	 while(resultslice.length >= 1000);
	}	

	for (var i = 0; i < searchResults.length; i++)
	{
		if (nlapiGetContext().getRemainingUsage() <= MINIMUM_USAGE)
		{
			nlapiLogExecution('AUDIT', 'Scheduled Script', 'Not enough usage left('
					+ nlapiGetContext().getRemainingUsage()
					+ ') . Exiting and rescheduling script.');
			setRecoveryPoint();
			checkGovernance();
		}
		 try
		 {
		nlapiDeleteRecord(searchResults[i].getRecordType(), searchResults[i].getId());
		 }
		 catch(e) {
				nlapiLogExecution('debug', 'Error has occured', e);
			}

		//nlapiLogExecution('debug', searchResults[i].getRecordType(), searchResults[i].getId());
	}
}


function setRecoveryPoint() {
    var state = nlapiSetRecoveryPoint();
    if (state.status == 'SUCCESS')
        return; 
	
    if (state.status == 'RESUME') 
    {
        nlapiLogExecution("ERROR", "Resuming script because of " + state.reason
				+ ".  Size = " + state.size);
        return;
    } else if (state.status == 'FAILURE') 
    {
        nlapiLogExecution("ERROR", "Failed to create recovery point. Reason = "
				+ state.reason + " / Size = " + state.size);
    }
}

function checkGovernance() {
    var context = nlapiGetContext();
    if (context.getRemainingUsage() < MINIMUM_USAGE) {
        var state = nlapiYieldScript();
        if (state.status == 'FAILURE') {
            nlapiLogExecution("ERROR",
					"Failed to yield script, exiting: Reason = " + state.reason
					+ " / Size = " + state.size);
            throw "Failed to yield script";
        }
    }
}